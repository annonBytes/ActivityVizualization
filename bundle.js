(function (d3) {
  'use strict';

  const svg = d3.select('svg');

  const width = svg.attr('width');
  const height = svg.attr('height');

  const render = data => {
    
    const xValue = d => d.Value;
    const yValue = d => d.Year;
    const margin = {top: 50, right: 40, bottom: 80, left: 70};
    const innerWidth = width - margin.left - margin.right;
    const innerHeight = height - margin.top - margin.bottom;
    
    const xScale = d3.scaleLinear()
       .domain([0,d3.max(data, xValue )])
       .range([0, innerWidth]);
    

    
    const yScale = d3.scaleBand()
      .domain(data.map(yValue))
    	.range([0, innerHeight])
      .padding(0.1)
    ;
    
    const g = svg.append('g')
    		.attr('transform', `translate(${margin.left}, ${margin.top})`);
    
    g.append('g').call(d3.axisLeft(yScale))
     	.selectAll('.domain, .tick line')
      	.remove();
    
    const xAxisG = g.append('g').call(d3.axisBottom(xScale))
    			.attr('transform', `translate(0, ${innerHeight})`);
    
    xAxisG		
    .select('.domain').remove();
    
      
    xAxisG.append('text')
    	.text('Steps Taken')
    	.attr('class', 'axis-label')
      .attr('x', innerWidth/2)
     	.attr('y', 50)
    	.attr('fill', 'black');
    
    g.selectAll('rect').data(data)
    	.enter().append('rect')
        .attr('y', d => yScale(yValue(d)))
    		.attr('width', d => xScale(xValue(d)))
        .attr('height', yScale.bandwidth());
    
    g.append('text')
    	.text('Step Counts through the Years')
    	.attr('x', innerWidth/2)
    	.attr('class', 'title');
  };

  d3.csv('data.csv').then( data => {
     data.forEach(d => {
        d.Value = +d.Value;
     });
     render(data);
  });

}(d3));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHNlbGVjdCwgY3N2LCBzY2FsZUxpbmVhciwgbWF4LCBzY2FsZUJhbmQsIGF4aXNMZWZ0LCBheGlzQm90dG9tIH0gZnJvbSAnZDMnO1xuXG5jb25zdCBzdmcgPSBzZWxlY3QoJ3N2ZycpO1xuXG5jb25zdCB3aWR0aCA9IHN2Zy5hdHRyKCd3aWR0aCcpO1xuY29uc3QgaGVpZ2h0ID0gc3ZnLmF0dHIoJ2hlaWdodCcpO1xuXG5jb25zdCByZW5kZXIgPSBkYXRhID0+IHtcbiAgXG4gIGNvbnN0IHhWYWx1ZSA9IGQgPT4gZC5WYWx1ZTtcbiAgY29uc3QgeVZhbHVlID0gZCA9PiBkLlllYXI7XG4gIGNvbnN0IG1hcmdpbiA9IHt0b3A6IDUwLCByaWdodDogNDAsIGJvdHRvbTogODAsIGxlZnQ6IDcwfVxuICBjb25zdCBpbm5lcldpZHRoID0gd2lkdGggLSBtYXJnaW4ubGVmdCAtIG1hcmdpbi5yaWdodFxuICBjb25zdCBpbm5lckhlaWdodCA9IGhlaWdodCAtIG1hcmdpbi50b3AgLSBtYXJnaW4uYm90dG9tXG4gIFxuICBjb25zdCB4U2NhbGUgPSBzY2FsZUxpbmVhcigpXG4gICAgIC5kb21haW4oWzAsbWF4KGRhdGEsIHhWYWx1ZSApXSlcbiAgICAgLnJhbmdlKFswLCBpbm5lcldpZHRoXSk7XG4gIFxuXG4gIFxuICBjb25zdCB5U2NhbGUgPSBzY2FsZUJhbmQoKVxuICAgIC5kb21haW4oZGF0YS5tYXAoeVZhbHVlKSlcbiAgXHQucmFuZ2UoWzAsIGlubmVySGVpZ2h0XSlcbiAgICAucGFkZGluZygwLjEpXG4gIDtcbiAgXG4gIGNvbnN0IGcgPSBzdmcuYXBwZW5kKCdnJylcbiAgXHRcdC5hdHRyKCd0cmFuc2Zvcm0nLCBgdHJhbnNsYXRlKCR7bWFyZ2luLmxlZnR9LCAke21hcmdpbi50b3B9KWApXG4gIFxuICBnLmFwcGVuZCgnZycpLmNhbGwoYXhpc0xlZnQoeVNjYWxlKSlcbiAgIFx0LnNlbGVjdEFsbCgnLmRvbWFpbiwgLnRpY2sgbGluZScpXG4gICAgXHQucmVtb3ZlKCk7XG4gIFxuICBjb25zdCB4QXhpc0cgPSBnLmFwcGVuZCgnZycpLmNhbGwoYXhpc0JvdHRvbSh4U2NhbGUpKVxuICBcdFx0XHQuYXR0cigndHJhbnNmb3JtJywgYHRyYW5zbGF0ZSgwLCAke2lubmVySGVpZ2h0fSlgKTtcbiAgXG4gIHhBeGlzR1x0XHRcbiAgLnNlbGVjdCgnLmRvbWFpbicpLnJlbW92ZSgpO1xuICBcbiAgICBcbiAgeEF4aXNHLmFwcGVuZCgndGV4dCcpXG4gIFx0LnRleHQoJ1N0ZXBzIFRha2VuJylcbiAgXHQuYXR0cignY2xhc3MnLCAnYXhpcy1sYWJlbCcpXG4gICAgLmF0dHIoJ3gnLCBpbm5lcldpZHRoLzIpXG4gICBcdC5hdHRyKCd5JywgNTApXG4gIFx0LmF0dHIoJ2ZpbGwnLCAnYmxhY2snKTtcbiAgXG4gIGcuc2VsZWN0QWxsKCdyZWN0JykuZGF0YShkYXRhKVxuICBcdC5lbnRlcigpLmFwcGVuZCgncmVjdCcpXG4gICAgICAuYXR0cigneScsIGQgPT4geVNjYWxlKHlWYWx1ZShkKSkpXG4gIFx0XHQuYXR0cignd2lkdGgnLCBkID0+IHhTY2FsZSh4VmFsdWUoZCkpKVxuICAgICAgLmF0dHIoJ2hlaWdodCcsIHlTY2FsZS5iYW5kd2lkdGgoKSlcbiAgXG4gIGcuYXBwZW5kKCd0ZXh0JylcbiAgXHQudGV4dCgnU3RlcCBDb3VudHMgdGhyb3VnaCB0aGUgWWVhcnMnKVxuICBcdC5hdHRyKCd4JywgaW5uZXJXaWR0aC8yKVxuICBcdC5hdHRyKCdjbGFzcycsICd0aXRsZScpO1xufVxuXG5jc3YoJ2RhdGEuY3N2JykudGhlbiggZGF0YSA9PiB7XG4gICBkYXRhLmZvckVhY2goZCA9PiB7XG4gICAgICBkLlZhbHVlID0gK2QuVmFsdWU7XG4gICB9KVxuICAgcmVuZGVyKGRhdGEpXG59KVxuXG5cblxuXG5cblxuXG5cblxuXG4iXSwibmFtZXMiOlsic2VsZWN0Iiwic2NhbGVMaW5lYXIiLCJtYXgiLCJzY2FsZUJhbmQiLCJheGlzTGVmdCIsImF4aXNCb3R0b20iLCJjc3YiXSwibWFwcGluZ3MiOiI7OztFQUVBLE1BQU0sR0FBRyxHQUFHQSxTQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDMUI7RUFDQSxNQUFNLEtBQUssR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0VBQ2hDLE1BQU0sTUFBTSxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDbEM7RUFDQSxNQUFNLE1BQU0sR0FBRyxJQUFJLElBQUk7RUFDdkI7RUFDQSxFQUFFLE1BQU0sTUFBTSxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFDO0VBQzlCLEVBQUUsTUFBTSxNQUFNLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUM7RUFDN0IsRUFBRSxNQUFNLE1BQU0sR0FBRyxDQUFDLEdBQUcsRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRSxNQUFNLEVBQUUsRUFBRSxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUM7RUFDM0QsRUFBRSxNQUFNLFVBQVUsR0FBRyxLQUFLLEdBQUcsTUFBTSxDQUFDLElBQUksR0FBRyxNQUFNLENBQUMsTUFBSztFQUN2RCxFQUFFLE1BQU0sV0FBVyxHQUFHLE1BQU0sR0FBRyxNQUFNLENBQUMsR0FBRyxHQUFHLE1BQU0sQ0FBQyxPQUFNO0VBQ3pEO0VBQ0EsRUFBRSxNQUFNLE1BQU0sR0FBR0MsY0FBVyxFQUFFO0VBQzlCLE1BQU0sTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDQyxNQUFHLENBQUMsSUFBSSxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUM7RUFDcEMsTUFBTSxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsVUFBVSxDQUFDLENBQUMsQ0FBQztFQUM3QjtBQUNBO0VBQ0E7RUFDQSxFQUFFLE1BQU0sTUFBTSxHQUFHQyxZQUFTLEVBQUU7RUFDNUIsS0FBSyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztFQUM3QixJQUFJLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxXQUFXLENBQUMsQ0FBQztFQUMzQixLQUFLLE9BQU8sQ0FBQyxHQUFHLENBQUM7RUFDakIsR0FBRztFQUNIO0VBQ0EsRUFBRSxNQUFNLENBQUMsR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQztFQUMzQixLQUFLLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQyxVQUFVLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBQztFQUNsRTtFQUNBLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUNDLFdBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQztFQUN0QyxLQUFLLFNBQVMsQ0FBQyxxQkFBcUIsQ0FBQztFQUNyQyxNQUFNLE1BQU0sRUFBRSxDQUFDO0VBQ2Y7RUFDQSxFQUFFLE1BQU0sTUFBTSxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDQyxhQUFVLENBQUMsTUFBTSxDQUFDLENBQUM7RUFDdkQsTUFBTSxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUMsYUFBYSxFQUFFLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0VBQ3hEO0VBQ0EsRUFBRSxNQUFNO0VBQ1IsR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUM7RUFDOUI7RUFDQTtFQUNBLEVBQUUsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUM7RUFDdkIsSUFBSSxJQUFJLENBQUMsYUFBYSxDQUFDO0VBQ3ZCLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRSxZQUFZLENBQUM7RUFDL0IsS0FBSyxJQUFJLENBQUMsR0FBRyxFQUFFLFVBQVUsQ0FBQyxDQUFDLENBQUM7RUFDNUIsS0FBSyxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQztFQUNsQixJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUM7RUFDMUI7RUFDQSxFQUFFLENBQUMsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztFQUNoQyxJQUFJLEtBQUssRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUM7RUFDMUIsT0FBTyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7RUFDeEMsS0FBSyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7RUFDMUMsT0FBTyxJQUFJLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxTQUFTLEVBQUUsRUFBQztFQUN6QztFQUNBLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUM7RUFDbEIsSUFBSSxJQUFJLENBQUMsK0JBQStCLENBQUM7RUFDekMsSUFBSSxJQUFJLENBQUMsR0FBRyxFQUFFLFVBQVUsQ0FBQyxDQUFDLENBQUM7RUFDM0IsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0VBQzNCLEVBQUM7QUFDRDtBQUNBQyxRQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsSUFBSSxFQUFFLElBQUksSUFBSTtFQUM5QixHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJO0VBQ3JCLE1BQU0sQ0FBQyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7RUFDekIsSUFBSSxFQUFDO0VBQ0wsR0FBRyxNQUFNLENBQUMsSUFBSSxFQUFDO0VBQ2YsQ0FBQzs7OzsifQ==